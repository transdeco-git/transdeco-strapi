input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Artist {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  syntymavuosi: Int
  esittely: String
  tunniste: String!
  etunimi: String
  sukunimi: String
  kuvatiedosto: String
  published_at: DateTime
}

type ArtistConnection {
  values: [Artist]
  groupBy: ArtistGroupBy
  aggregate: ArtistAggregator
}

type ArtistAggregator {
  count: Int
  totalCount: Int
  sum: ArtistAggregatorSum
  avg: ArtistAggregatorAvg
  min: ArtistAggregatorMin
  max: ArtistAggregatorMax
}

type ArtistAggregatorSum {
  syntymavuosi: Float
}

type ArtistAggregatorAvg {
  syntymavuosi: Float
}

type ArtistAggregatorMin {
  syntymavuosi: Float
}

type ArtistAggregatorMax {
  syntymavuosi: Float
}

type ArtistGroupBy {
  id: [ArtistConnectionId]
  _id: [ArtistConnection_id]
  createdAt: [ArtistConnectionCreatedAt]
  updatedAt: [ArtistConnectionUpdatedAt]
  syntymavuosi: [ArtistConnectionSyntymavuosi]
  esittely: [ArtistConnectionEsittely]
  tunniste: [ArtistConnectionTunniste]
  etunimi: [ArtistConnectionEtunimi]
  sukunimi: [ArtistConnectionSukunimi]
  kuvatiedosto: [ArtistConnectionKuvatiedosto]
  published_at: [ArtistConnectionPublished_at]
}

type ArtistConnectionId {
  key: ID
  connection: ArtistConnection
}

type ArtistConnection_id {
  key: ID
  connection: ArtistConnection
}

type ArtistConnectionCreatedAt {
  key: DateTime
  connection: ArtistConnection
}

type ArtistConnectionUpdatedAt {
  key: DateTime
  connection: ArtistConnection
}

type ArtistConnectionSyntymavuosi {
  key: Int
  connection: ArtistConnection
}

type ArtistConnectionEsittely {
  key: String
  connection: ArtistConnection
}

type ArtistConnectionTunniste {
  key: String
  connection: ArtistConnection
}

type ArtistConnectionEtunimi {
  key: String
  connection: ArtistConnection
}

type ArtistConnectionSukunimi {
  key: String
  connection: ArtistConnection
}

type ArtistConnectionKuvatiedosto {
  key: String
  connection: ArtistConnection
}

type ArtistConnectionPublished_at {
  key: DateTime
  connection: ArtistConnection
}

input ArtistInput {
  syntymavuosi: Int
  esittely: String
  tunniste: String!
  etunimi: String
  sukunimi: String
  kuvatiedosto: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editArtistInput {
  syntymavuosi: Int
  esittely: String
  tunniste: String
  etunimi: String
  sukunimi: String
  kuvatiedosto: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createArtistInput {
  data: ArtistInput
}

type createArtistPayload {
  artist: Artist
}

input updateArtistInput {
  where: InputID
  data: editArtistInput
}

type updateArtistPayload {
  artist: Artist
}

input deleteArtistInput {
  where: InputID
}

type deleteArtistPayload {
  artist: Artist
}

"""Yhteydenotot"""
type Contact {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  otsikko: String
  teksti: String
  tunniste: String
  published_at: DateTime
}

type ContactConnection {
  values: [Contact]
  groupBy: ContactGroupBy
  aggregate: ContactAggregator
}

type ContactAggregator {
  count: Int
  totalCount: Int
}

type ContactGroupBy {
  id: [ContactConnectionId]
  _id: [ContactConnection_id]
  createdAt: [ContactConnectionCreatedAt]
  updatedAt: [ContactConnectionUpdatedAt]
  otsikko: [ContactConnectionOtsikko]
  teksti: [ContactConnectionTeksti]
  tunniste: [ContactConnectionTunniste]
  published_at: [ContactConnectionPublished_at]
}

type ContactConnectionId {
  key: ID
  connection: ContactConnection
}

type ContactConnection_id {
  key: ID
  connection: ContactConnection
}

type ContactConnectionCreatedAt {
  key: DateTime
  connection: ContactConnection
}

type ContactConnectionUpdatedAt {
  key: DateTime
  connection: ContactConnection
}

type ContactConnectionOtsikko {
  key: String
  connection: ContactConnection
}

type ContactConnectionTeksti {
  key: String
  connection: ContactConnection
}

type ContactConnectionTunniste {
  key: String
  connection: ContactConnection
}

type ContactConnectionPublished_at {
  key: DateTime
  connection: ContactConnection
}

input ContactInput {
  otsikko: String
  teksti: String
  tunniste: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editContactInput {
  otsikko: String
  teksti: String
  tunniste: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createContactInput {
  data: ContactInput
}

type createContactPayload {
  contact: Contact
}

input updateContactInput {
  where: InputID
  data: editContactInput
}

type updateContactPayload {
  contact: Contact
}

input deleteContactInput {
  where: InputID
}

type deleteContactPayload {
  contact: Contact
}

type Photo {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  tiedostonimi: String
  kuvanimi: String
  kuvataan_uudelleen: Boolean
}

type PhotoConnection {
  values: [Photo]
  groupBy: PhotoGroupBy
  aggregate: PhotoAggregator
}

type PhotoAggregator {
  count: Int
  totalCount: Int
}

type PhotoGroupBy {
  id: [PhotoConnectionId]
  _id: [PhotoConnection_id]
  createdAt: [PhotoConnectionCreatedAt]
  updatedAt: [PhotoConnectionUpdatedAt]
  tiedostonimi: [PhotoConnectionTiedostonimi]
  kuvanimi: [PhotoConnectionKuvanimi]
  kuvataan_uudelleen: [PhotoConnectionKuvataan_uudelleen]
}

type PhotoConnectionId {
  key: ID
  connection: PhotoConnection
}

type PhotoConnection_id {
  key: ID
  connection: PhotoConnection
}

type PhotoConnectionCreatedAt {
  key: DateTime
  connection: PhotoConnection
}

type PhotoConnectionUpdatedAt {
  key: DateTime
  connection: PhotoConnection
}

type PhotoConnectionTiedostonimi {
  key: String
  connection: PhotoConnection
}

type PhotoConnectionKuvanimi {
  key: String
  connection: PhotoConnection
}

type PhotoConnectionKuvataan_uudelleen {
  key: Boolean
  connection: PhotoConnection
}

input PhotoInput {
  tiedostonimi: String
  kuvanimi: String
  kuvataan_uudelleen: Boolean
  created_by: ID
  updated_by: ID
}

input editPhotoInput {
  tiedostonimi: String
  kuvanimi: String
  kuvataan_uudelleen: Boolean
  created_by: ID
  updated_by: ID
}

input createPhotoInput {
  data: PhotoInput
}

type createPhotoPayload {
  photo: Photo
}

input updatePhotoInput {
  where: InputID
  data: editPhotoInput
}

type updatePhotoPayload {
  photo: Photo
}

input deletePhotoInput {
  where: InputID
}

type deletePhotoPayload {
  photo: Photo
}

type Product {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  picture: UploadFile
  shopifyID: String
  published_at: DateTime
}

type ProductConnection {
  values: [Product]
  groupBy: ProductGroupBy
  aggregate: ProductAggregator
}

type ProductAggregator {
  count: Int
  totalCount: Int
}

type ProductGroupBy {
  id: [ProductConnectionId]
  _id: [ProductConnection_id]
  createdAt: [ProductConnectionCreatedAt]
  updatedAt: [ProductConnectionUpdatedAt]
  title: [ProductConnectionTitle]
  description: [ProductConnectionDescription]
  picture: [ProductConnectionPicture]
  shopifyID: [ProductConnectionShopifyID]
  published_at: [ProductConnectionPublished_at]
}

type ProductConnectionId {
  key: ID
  connection: ProductConnection
}

type ProductConnection_id {
  key: ID
  connection: ProductConnection
}

type ProductConnectionCreatedAt {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionUpdatedAt {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionTitle {
  key: String
  connection: ProductConnection
}

type ProductConnectionDescription {
  key: String
  connection: ProductConnection
}

type ProductConnectionPicture {
  key: ID
  connection: ProductConnection
}

type ProductConnectionShopifyID {
  key: String
  connection: ProductConnection
}

type ProductConnectionPublished_at {
  key: DateTime
  connection: ProductConnection
}

input ProductInput {
  title: String
  description: String
  picture: ID
  shopifyID: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editProductInput {
  title: String
  description: String
  picture: ID
  shopifyID: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Product
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

type Single {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  otsikko: String
  teksti: String
  tunniste: String
  published_at: DateTime
}

type SingleConnection {
  values: [Single]
  groupBy: SingleGroupBy
  aggregate: SingleAggregator
}

type SingleAggregator {
  count: Int
  totalCount: Int
}

type SingleGroupBy {
  id: [SingleConnectionId]
  _id: [SingleConnection_id]
  createdAt: [SingleConnectionCreatedAt]
  updatedAt: [SingleConnectionUpdatedAt]
  otsikko: [SingleConnectionOtsikko]
  teksti: [SingleConnectionTeksti]
  tunniste: [SingleConnectionTunniste]
  published_at: [SingleConnectionPublished_at]
}

type SingleConnectionId {
  key: ID
  connection: SingleConnection
}

type SingleConnection_id {
  key: ID
  connection: SingleConnection
}

type SingleConnectionCreatedAt {
  key: DateTime
  connection: SingleConnection
}

type SingleConnectionUpdatedAt {
  key: DateTime
  connection: SingleConnection
}

type SingleConnectionOtsikko {
  key: String
  connection: SingleConnection
}

type SingleConnectionTeksti {
  key: String
  connection: SingleConnection
}

type SingleConnectionTunniste {
  key: String
  connection: SingleConnection
}

type SingleConnectionPublished_at {
  key: DateTime
  connection: SingleConnection
}

input SingleInput {
  otsikko: String
  teksti: String
  tunniste: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSingleInput {
  otsikko: String
  teksti: String
  tunniste: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSingleInput {
  data: SingleInput
}

type createSinglePayload {
  single: Single
}

input updateSingleInput {
  where: InputID
  data: editSingleInput
}

type updateSinglePayload {
  single: Single
}

input deleteSingleInput {
  where: InputID
}

type deleteSinglePayload {
  single: Single
}

type Work {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  tait_tunniste: String
  tuotenumero: Int
  teosnimi: String
  tunniste: String
  hinta: Int
  korkeus: Int
  leveys: Int
  tekniikka: String
  valmistumisvuosi: Int
  vedosmaara: Int
  kuvatiedosto: String
  shopifyID: String
  published_at: DateTime
  kuva(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type WorkConnection {
  values: [Work]
  groupBy: WorkGroupBy
  aggregate: WorkAggregator
}

type WorkAggregator {
  count: Int
  totalCount: Int
  sum: WorkAggregatorSum
  avg: WorkAggregatorAvg
  min: WorkAggregatorMin
  max: WorkAggregatorMax
}

type WorkAggregatorSum {
  tuotenumero: Float
  hinta: Float
  korkeus: Float
  leveys: Float
  valmistumisvuosi: Float
  vedosmaara: Float
}

type WorkAggregatorAvg {
  tuotenumero: Float
  hinta: Float
  korkeus: Float
  leveys: Float
  valmistumisvuosi: Float
  vedosmaara: Float
}

type WorkAggregatorMin {
  tuotenumero: Float
  hinta: Float
  korkeus: Float
  leveys: Float
  valmistumisvuosi: Float
  vedosmaara: Float
}

type WorkAggregatorMax {
  tuotenumero: Float
  hinta: Float
  korkeus: Float
  leveys: Float
  valmistumisvuosi: Float
  vedosmaara: Float
}

type WorkGroupBy {
  id: [WorkConnectionId]
  _id: [WorkConnection_id]
  createdAt: [WorkConnectionCreatedAt]
  updatedAt: [WorkConnectionUpdatedAt]
  tait_tunniste: [WorkConnectionTait_tunniste]
  tuotenumero: [WorkConnectionTuotenumero]
  teosnimi: [WorkConnectionTeosnimi]
  tunniste: [WorkConnectionTunniste]
  hinta: [WorkConnectionHinta]
  korkeus: [WorkConnectionKorkeus]
  leveys: [WorkConnectionLeveys]
  tekniikka: [WorkConnectionTekniikka]
  valmistumisvuosi: [WorkConnectionValmistumisvuosi]
  vedosmaara: [WorkConnectionVedosmaara]
  kuvatiedosto: [WorkConnectionKuvatiedosto]
  shopifyID: [WorkConnectionShopifyID]
  published_at: [WorkConnectionPublished_at]
}

type WorkConnectionId {
  key: ID
  connection: WorkConnection
}

type WorkConnection_id {
  key: ID
  connection: WorkConnection
}

type WorkConnectionCreatedAt {
  key: DateTime
  connection: WorkConnection
}

type WorkConnectionUpdatedAt {
  key: DateTime
  connection: WorkConnection
}

type WorkConnectionTait_tunniste {
  key: String
  connection: WorkConnection
}

type WorkConnectionTuotenumero {
  key: Int
  connection: WorkConnection
}

type WorkConnectionTeosnimi {
  key: String
  connection: WorkConnection
}

type WorkConnectionTunniste {
  key: String
  connection: WorkConnection
}

type WorkConnectionHinta {
  key: Int
  connection: WorkConnection
}

type WorkConnectionKorkeus {
  key: Int
  connection: WorkConnection
}

type WorkConnectionLeveys {
  key: Int
  connection: WorkConnection
}

type WorkConnectionTekniikka {
  key: String
  connection: WorkConnection
}

type WorkConnectionValmistumisvuosi {
  key: Int
  connection: WorkConnection
}

type WorkConnectionVedosmaara {
  key: Int
  connection: WorkConnection
}

type WorkConnectionKuvatiedosto {
  key: String
  connection: WorkConnection
}

type WorkConnectionShopifyID {
  key: String
  connection: WorkConnection
}

type WorkConnectionPublished_at {
  key: DateTime
  connection: WorkConnection
}

input WorkInput {
  tait_tunniste: String
  tuotenumero: Int
  teosnimi: String
  tunniste: String
  hinta: Int
  korkeus: Int
  leveys: Int
  tekniikka: String
  valmistumisvuosi: Int
  vedosmaara: Int
  kuva: [ID]
  kuvatiedosto: String
  shopifyID: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editWorkInput {
  tait_tunniste: String
  tuotenumero: Int
  teosnimi: String
  tunniste: String
  hinta: Int
  korkeus: Int
  leveys: Int
  tekniikka: String
  valmistumisvuosi: Int
  vedosmaara: Int
  kuva: [ID]
  kuvatiedosto: String
  shopifyID: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createWorkInput {
  data: WorkInput
}

type createWorkPayload {
  work: Work
}

input updateWorkInput {
  where: InputID
  data: editWorkInput
}

type updateWorkPayload {
  work: Work
}

input deleteWorkInput {
  where: InputID
}

type deleteWorkPayload {
  work: Work
}

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Artist | ArtistConnection | ArtistAggregator | ArtistAggregatorSum | ArtistAggregatorAvg | ArtistAggregatorMin | ArtistAggregatorMax | ArtistGroupBy | ArtistConnectionId | ArtistConnection_id | ArtistConnectionCreatedAt | ArtistConnectionUpdatedAt | ArtistConnectionSyntymavuosi | ArtistConnectionEsittely | ArtistConnectionTunniste | ArtistConnectionEtunimi | ArtistConnectionSukunimi | ArtistConnectionKuvatiedosto | ArtistConnectionPublished_at | createArtistPayload | updateArtistPayload | deleteArtistPayload | Contact | ContactConnection | ContactAggregator | ContactGroupBy | ContactConnectionId | ContactConnection_id | ContactConnectionCreatedAt | ContactConnectionUpdatedAt | ContactConnectionOtsikko | ContactConnectionTeksti | ContactConnectionTunniste | ContactConnectionPublished_at | createContactPayload | updateContactPayload | deleteContactPayload | Photo | PhotoConnection | PhotoAggregator | PhotoGroupBy | PhotoConnectionId | PhotoConnection_id | PhotoConnectionCreatedAt | PhotoConnectionUpdatedAt | PhotoConnectionTiedostonimi | PhotoConnectionKuvanimi | PhotoConnectionKuvataan_uudelleen | createPhotoPayload | updatePhotoPayload | deletePhotoPayload | Product | ProductConnection | ProductAggregator | ProductGroupBy | ProductConnectionId | ProductConnection_id | ProductConnectionCreatedAt | ProductConnectionUpdatedAt | ProductConnectionTitle | ProductConnectionDescription | ProductConnectionPicture | ProductConnectionShopifyID | ProductConnectionPublished_at | createProductPayload | updateProductPayload | deleteProductPayload | Single | SingleConnection | SingleAggregator | SingleGroupBy | SingleConnectionId | SingleConnection_id | SingleConnectionCreatedAt | SingleConnectionUpdatedAt | SingleConnectionOtsikko | SingleConnectionTeksti | SingleConnectionTunniste | SingleConnectionPublished_at | createSinglePayload | updateSinglePayload | deleteSinglePayload | Work | WorkConnection | WorkAggregator | WorkAggregatorSum | WorkAggregatorAvg | WorkAggregatorMin | WorkAggregatorMax | WorkGroupBy | WorkConnectionId | WorkConnection_id | WorkConnectionCreatedAt | WorkConnectionUpdatedAt | WorkConnectionTait_tunniste | WorkConnectionTuotenumero | WorkConnectionTeosnimi | WorkConnectionTunniste | WorkConnectionHinta | WorkConnectionKorkeus | WorkConnectionLeveys | WorkConnectionTekniikka | WorkConnectionValmistumisvuosi | WorkConnectionVedosmaara | WorkConnectionKuvatiedosto | WorkConnectionShopifyID | WorkConnectionPublished_at | createWorkPayload | updateWorkPayload | deleteWorkPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  artist(id: ID!, publicationState: PublicationState): Artist
  artists(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Artist]
  artistsConnection(sort: String, limit: Int, start: Int, where: JSON): ArtistConnection
  contact(id: ID!, publicationState: PublicationState): Contact
  contacts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Contact]
  contactsConnection(sort: String, limit: Int, start: Int, where: JSON): ContactConnection
  photo(id: ID!, publicationState: PublicationState): Photo
  photos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Photo]
  photosConnection(sort: String, limit: Int, start: Int, where: JSON): PhotoConnection
  product(id: ID!, publicationState: PublicationState): Product
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Product]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductConnection
  single(id: ID!, publicationState: PublicationState): Single
  singles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Single]
  singlesConnection(sort: String, limit: Int, start: Int, where: JSON): SingleConnection
  work(id: ID!, publicationState: PublicationState): Work
  works(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Work]
  worksConnection(sort: String, limit: Int, start: Int, where: JSON): WorkConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createArtist(input: createArtistInput): createArtistPayload
  updateArtist(input: updateArtistInput): updateArtistPayload
  deleteArtist(input: deleteArtistInput): deleteArtistPayload
  createContact(input: createContactInput): createContactPayload
  updateContact(input: updateContactInput): updateContactPayload
  deleteContact(input: deleteContactInput): deleteContactPayload
  createPhoto(input: createPhotoInput): createPhotoPayload
  updatePhoto(input: updatePhotoInput): updatePhotoPayload
  deletePhoto(input: deletePhotoInput): deletePhotoPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createSingle(input: createSingleInput): createSinglePayload
  updateSingle(input: updateSingleInput): updateSinglePayload
  deleteSingle(input: deleteSingleInput): deleteSinglePayload
  createWork(input: createWorkInput): createWorkPayload
  updateWork(input: updateWorkInput): updateWorkPayload
  deleteWork(input: deleteWorkInput): deleteWorkPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
